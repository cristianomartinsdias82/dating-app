Executed commands:

SERVER-SIDE

dotnet new sln -n DatingApp
dotnet new webapi -n DatingApp.Api
dotnet sln add DatingApp.Api

git init
git add README.md
git commit -m "Initial"
git branch -M master
git remote add origin git@github.com:cristianomartinsdias82/dating-app.git
                      https://github.com/cristianomartinsdias82/dating-app.git
git push -u origin master

(A)*
touch .gitignore (cd into solution root folder to execute this command!) (Also, checkout .gitignore file)

(B)*
dotnet new gitignore (cd into solution root folder to execute this command!)
dotnet dev-certs http —trust
dotnet tool install —global dotnet-ef

dotnet add package Pomelo.EntityFrameworkCore.MySql
dotnet add package Pomelo.EntityFrameworkCore.MySql.Design
dotnet add package Microsoft.EntityFrameworkCore.Design

dotnet restore

dotnet ef migrations add InitialCreate -o Data/Migrations
dotnet ef database update

dotnet watch run


git add .
git status
git commit -m "Add Entity Framework with MySql as the database provider"
git push


*both commands work to create the ignore file, but the latter produces the file that is ready to go!

dotnet ef migrations add AddedUserPasswordProperties
dotnet ef database update


IF you with to drop the database, here's the command
dotnet ef database drop (JUST CONFIRM AND WAIT)
THEN, just recreate it
dotnet ef database update

dotnet add package System.IdentityModel.Tokens.Jwt
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
-----------------------------------------------------------------------

CLIENT-SIDE

Angular-CLI installation
npm install -g @angular/cli
  (for some specific version -> npm install -g @angular/cli@XX)
  (for latest version -> npm install -g @angular/cli@latest)

Workspace creation
(cd into DatingApp root folder)
ng new client --directory client --create-application false --skip-install --interactive false

DatingApp Spa app creation
(cd into client folder)
ng g app DatingApp --strict false --style scss --routing true --prefix dta

FOR YOUR INFORMATION ONLY
Whenever you wish to add other projects - app or library - to the workspace, use the examples above:
 cd into client folder, then:
 ng g lib MyLibWithAnyName

 cd into client folder, then:
 ng g app MyOtherAppWithAnyName --strict false --style scss --routing true --prefix dta

Then, whenever you wish to add some feature (comp, serv, pipe, direct, resolve, guard etc) to one of your projects, use --project [PROJNAME] parameter. Example:
 ng g component Xpto --project MyLibWithAnyName

If you wish to add external libraries to one of your project, same applies here:
 ng add @angular/material --project=[PROJNAME]

If you wish to test some specific project of your workspace, same applies here:
 ng test --project=[PROJNAME]

If you wish to launch some specific project of your workspace, same applies here:
 ng serve --project=[PROJNAME] --open

Reference url:
(https://octoperf.com/blog/2019/08/22/kraken-angular-workspace-multi-application-project/#sharing-assets-across-libraries-and-applications)


External client libraries
- Bootstrap (valor-software.com/ngx-boostrap)
  How its been installed:
    cd into client/projects/dating-app
    npm install --save jquery@latest
    npm install --save bootstrap@4.5.3
    npm install ngx-bootstrap@latest --legacy-peer-deps

- Font-awesome
  How its been installed:
    cd into client/projects/dating-app
    npm install --save font-awesome

Self-signed HTTPS certificate (MAC OS)

Project development CLI commands
ng g c NavBar --project dating-app --skip-tests

ng g s Account --project dating-app --skip-tests

ng g c Home --project dating-app --skip-tests

ng g c Registration --project dating-app --skip-tests

ng g c members/MembersList --skip-tests

ng g c members/MemberDetails --skip-tests

ng g c Lists --skip-tests

ng g c Messages --skip-tests

ng add ngx-toastr --project dating-app

ng g g AuthenticationRequired --skip-tests

ng add bootswatch --project dating-app

ng g m Shared